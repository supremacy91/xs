<?php

namespace Biztech\Manufacturer\Model\Indexer\Data;

/**
 * Abstract action reindex class
 */
abstract class AbstractDataAction
{
    /**
     * EAV Indexers by type
     *
     * @var array
     */
    protected $_types;

    /**
     * @var \Magento\Catalog\Model\ResourceModel\Product\Indexer\Eav\SourceFactory
     */
    protected $_manufacturertextModel;

    /**
     * @var \Magento\Catalog\Model\ResourceModel\Product\Indexer\Eav\DecimalFactory
     */
    protected $_manufacturerModel;

    protected $_storeConfig;
    protected $_urlRewriteFactory;
    protected $_urlPersist;



    /**
     * @param \Biztech\Manufacturer\Model\Manufacturer $manufacturerModel
     * @param \Biztech\Manufacturer\Model\Manufacturertext $manufacturertextModel
     */
    public function __construct(
        \Biztech\Manufacturer\Model\Manufacturer $manufacturerModel,
        \Biztech\Manufacturer\Model\Manufacturertext $manufacturertextModel,
        \Biztech\Manufacturer\Model\Config $config,
        \Magento\UrlRewrite\Service\V1\Data\UrlRewriteFactory $urlRewriteFactory, 
        \Magento\UrlRewrite\Model\UrlPersistInterface $urlPersist
    ) {
        $this->_manufacturerModel = $manufacturerModel;
        $this->_manufacturertextModel = $manufacturertextModel;
        $this->_storeConfig = $config;
        $this->_urlRewriteFactory = $urlRewriteFactory;
        $this->_urlPersist = $urlPersist;
    }

    /**
     * Execute action for given ids
     *
     * @param array|int $ids
     * @return void
     */
    abstract public function execute($ids);

    /**
     * Reindex entities
     *
     * @param null|array|int $ids
     * @return void
     */
    public function reindex($ids = null)
    {
        $urls = array();
        $manufacturerCollection = $this->_manufacturerModel->getCollection();

        foreach ($manufacturerCollection as $manufacturer) {
            $id = $manufacturer->getManufacturerId();
            $url_key = $manufacturer->getUrlKey();

            $parentModel = $this->_manufacturertextModel->getCollection()->addFieldToFilter('manufacturer_id', $id)
                        ->addFieldToFilter('store_id', 0)->load();
            $parentText = $parentModel->getData()[0];
            array_shift($parentText);

            foreach ($this->_storeConfig->getStoreManager()->getStores() as $store) {
                $collectionText = $this->_manufacturertextModel->getCollection()
                                    ->addFieldToFilter('manufacturer_id', $id)
                                    ->addFieldToFilter('store_id',$store->getId())
                                    ->load();
                $text = $collectionText->getData();

                if( is_array($text) && !isset($text[0]) ){
                    $storeModel = $this->_manufacturertextModel;
                    $storeModel->setData($parentText)->setStoreId($store->getId());
                    $storeModel->save();
                    $urls[] = $this->createUrlRewrite($store->getId(), $storeModel->getUrlKey(), $id);
                }
            }
        }
            $this->_urlPersist->replace($urls);
    }

    protected function createUrlRewrite($storeId, $url_key, $id, $redirectType = 0) {
        return $this->_urlRewriteFactory->create()->setStoreId($storeId)
        ->setEntityType('manufacturer')
        ->setEntityId($id)
        ->setRequestPath($url_key)
        ->setTargetPath('manufacturer/index/view/id/' . $id)
        ->setIsAutogenerated(1)
        ->setRedirectType($redirectType);
    }
}
