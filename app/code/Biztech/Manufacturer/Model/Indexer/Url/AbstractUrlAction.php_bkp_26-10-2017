<?php

namespace Biztech\Manufacturer\Model\Indexer\Url;

/**
 * Abstract action reindex class
 */
abstract class AbstractUrlAction
{
	/**
	 * @var \Magento\Catalog\Model\ResourceModel\Product\Indexer\Eav\SourceFactory
	 */
	protected $_manufacturertextModel;

	/**
	 * @var \Magento\Catalog\Model\ResourceModel\Product\Indexer\Eav\DecimalFactory
	 */
	protected $_manufacturerModel;

	protected $_storeConfig;
	protected $_urlRewriteFactory;
	protected $_urlPersist;
	protected $_urlRewrite;
	protected $_logger;



	/**
	 * @param \Biztech\Manufacturer\Model\Manufacturer $manufacturerModel
	 * @param \Biztech\Manufacturer\Model\Manufacturertext $manufacturertextModel
	 */
	public function __construct(
		\Biztech\Manufacturer\Model\Manufacturer $manufacturerModel,
		\Biztech\Manufacturer\Model\Manufacturertext $manufacturertextModel,
		\Biztech\Manufacturer\Model\Config $config,
		\Magento\UrlRewrite\Model\UrlRewrite $urlRewrite,
		\Magento\UrlRewrite\Service\V1\Data\UrlRewriteFactory $urlRewriteFactory,
		\Magento\UrlRewrite\Model\UrlPersistInterface $urlPersist,
		\Biztech\Manufacturer\Logger\Logger $logger,
		array $data = []
		) {
		$this->_manufacturerModel = $manufacturerModel;
		$this->_manufacturertextModel = $manufacturertextModel;
		$this->_storeConfig = $config;
		$this->_urlRewrite = $urlRewrite;
		$this->_urlRewriteFactory = $urlRewriteFactory;
		$this->_urlPersist = $urlPersist;
		$this->_logger = $logger;
	}

	/**
	 * Execute action for given ids
	 *
	 * @param array|int $ids
	 * @return void
	 */
	abstract public function execute($ids);

	/**
	 * Reindex entities
	 *
	 * @param null|array|int $ids
	 * @return void
	 */
	public function reindex($ids = null)
	{
		$urls = [];
		$manufacturerCollection = $this->_manufacturerModel->getCollection();

		foreach ($manufacturerCollection as $manufacturer) {
			$id = $manufacturer->getManufacturerId();
			$url_key = $manufacturer->getUrlKey();

			foreach ($this->_storeConfig->getStoreManager()->getStores() as $store) {
				$modelText = $this->_manufacturertextModel->getCollection()
				->addFieldToFilter('manufacturer_id', $id)
				->addFieldToFilter('store_id', $store->getId())
				->load();
				$text = $modelText->getData();
				if( is_array($text) && isset($text[0]) ){
					$urlKey = $text[0]['url_key'];
				}
				if( !is_null($urlKey) ){
					if( !$this->checkUrl($id, $urlKey, $store->getId() ) ){
						$urls[] = $this->createUrlRewrite($store->getId(), $urlKey, $id );
					}
				}
			}
		}

		$this->_urlPersist->replace($urls);
	}

	public function checkUrl($id, $request_path, $storeId = 0 ) {

		$urlRewriteCollection = $this->_urlRewrite->getCollection()
		->addFieldToFilter('request_path', $request_path)
		->addFieldToFilter('entity_id',$id)
		->addFieldToFilter('entity_type','manufacturer')
		->addFieldToFilter('target_path','manufacturer/index/view/id/'. $id)
		->addFieldToFilter('store_id',$storeId);

		if( count($urlRewriteCollection) == 0 ){
			return false;
		}
		return true;
	}



	protected function createUrlRewrite($storeId, $url_key, $id, $redirectType = 0) {
		return $this->_urlRewriteFactory->create()->setStoreId($storeId)
		->setEntityType('manufacturer')
		->setEntityId($id)
		->setRequestPath($url_key)
		->setTargetPath('manufacturer/index/view/id/' . $id)
		->setIsAutogenerated(1)
		->setRedirectType($redirectType);
	}
}
