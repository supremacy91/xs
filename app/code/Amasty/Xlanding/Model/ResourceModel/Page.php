<?php
/**
 * @author Amasty Team
 * @copyright Copyright (c) 2017 Amasty (https://www.amasty.com)
 * @package Amasty_Xlanding
 */

namespace Amasty\Xlanding\Model\ResourceModel;

use Magento\Framework\App\ResourceConnection;
use Magento\UrlRewrite\Service\V1\Data\UrlRewriteFactory;
use Magento\UrlRewrite\Model\UrlPersistInterface;
use Magento\UrlRewrite\Service\V1\Data\UrlRewrite;
use Magento\Cms\Model\Page as CmsPage;
use Magento\Framework\DB\Select;
use Magento\Framework\Stdlib\DateTime;
use Magento\Store\Model\Store;
use Magento\Store\Model\StoreManagerInterface;
use Magento\Framework\Module\Manager;

class Page extends \Magento\Framework\Model\ResourceModel\Db\AbstractDb
{
    const ENTITY_TYPE = 'amasty-xlanding-page';

    protected $urlRewriteFactory;
    protected $urlPersist;
    protected $_storeManager;

    /** @var  Manager */
    private $moduleManager;

    public function __construct(
        \Magento\Framework\Model\ResourceModel\Db\Context $context,
        StoreManagerInterface $storeManager,
        UrlRewriteFactory $urlRewriteFactory,
        UrlPersistInterface $urlPersist,
        Manager $moduleManager,
        $connectionName = null
    ) {
        $this->urlRewriteFactory = $urlRewriteFactory;
        $this->urlPersist = $urlPersist;
        $this->_storeManager = $storeManager;
        $this->moduleManager = $moduleManager;
        return parent::__construct(
            $context,
            $connectionName
        );
    }

    protected function _construct()
    {
        $this->_init('amasty_xlanding_page', 'page_id');
    }

    protected function generateForAllStores(\Magento\Framework\Model\AbstractModel $object)
    {
        $urls = [];
        foreach ($this->_storeManager->getStores() as $store) {
            $urls[] = $this->createUrlRewrite($object, $store->getStoreId());
        }
        return $urls;
    }

    /**
     * Generate list of urls per store
     *
     * @param int[] $storeIds
     * @return \Magento\UrlRewrite\Service\V1\Data\UrlRewrite[]
     */
    protected function generateForSpecificStores(\Magento\Framework\Model\AbstractModel $object, $storeIds)
    {
        $urls = [];
        $existingStores = $this->_storeManager->getStores();
        foreach ($storeIds as $storeId) {
            if (!isset($existingStores[$storeId])) {
                continue;
            }
            $urls[] = $this->createUrlRewrite($object, $storeId);
        }
        return $urls;
    }

    protected function _afterLoad(\Magento\Framework\Model\AbstractModel $object)
    {
        if ($object->getId()) {
            $stores = $this->lookupStoreIds($object->getId());

            $object->setData('store_id', $stores);
        }

        return parent::_afterLoad($object);
    }

    protected function createUrlRewrite(\Magento\Framework\Model\AbstractModel $object, $storeId, $redirectType = 0)
    {

        return $this->urlRewriteFactory->create()
            ->setStoreId($storeId)
            ->setEntityType(self::ENTITY_TYPE)
            ->setEntityId($object->getId())
            ->setRequestPath($object->getIdentifier())
            ->setTargetPath('amasty_xlanding/page/view/page_id/' . $object->getId())
            ->setIsAutogenerated(1)
            ->setRedirectType($redirectType);
    }

    public function lookupStoreIds($pageId)
    {
        $connection = $this->getConnection();

        $select = $connection->select()->from(
            $this->getTable('amasty_xlanding_page_store'),
            'store_id'
        )->where(
            'page_id = ?',
            (int)$pageId
        );

        return $connection->fetchCol($select);
    }

    public function checkIdentifier($identifier, $storeId)
    {
        $stores = [\Magento\Store\Model\Store::DEFAULT_STORE_ID, $storeId];
        $select = $this->_getLoadByIdentifierSelect($identifier, $stores, 1);
        $select->reset(\Magento\Framework\DB\Select::COLUMNS)->columns('cp.page_id')->order('cps.store_id DESC')->limit(1);

        return $this->getConnection()->fetchOne($select);
    }

    protected function _getLoadByIdentifierSelect($identifier, $store, $isActive = null)
    {
        $select = $this->getConnection()->select()->from(
            ['cp' => $this->getMainTable()]
        )->join(
            ['cps' => $this->getTable('amasty_xlanding_page_store')],
            'cp.page_id = cps.page_id',
            []
        )->where(
            'cp.identifier = ?',
            $identifier
        )->where(
            'cps.store_id IN (?)',
            $store
        );

        if (!is_null($isActive)) {
            $select->where('cp.is_active = ?', $isActive);
        }

        return $select;
    }

    protected function _afterSave(\Magento\Framework\Model\AbstractModel $object)
    {
        $oldStores = $this->lookupStoreIds($object->getId());
        $newStores = (array)$object->getStores();
        if (empty($newStores)) {
            $newStores = (array)$object->getStoreId();
        }
        $table = $this->getTable('amasty_xlanding_page_store');
        $insert = array_diff($newStores, $oldStores);
        $delete = array_diff($oldStores, $newStores);

        if ($delete) {
            $where = ['page_id = ?' => (int)$object->getId(), 'store_id IN (?)' => $delete];

            $this->getConnection()->delete($table, $where);
        }

        if ($insert) {
            $data = [];

            foreach ($insert as $storeId) {
                $data[] = ['page_id' => (int)$object->getId(), 'store_id' => (int)$storeId];
            }

            $this->getConnection()->insertMultiple($table, $data);
        }

        if ($this->moduleManager->isEnabled('Magento_UrlRewrite')) {
            $urls = array_search('0', $newStores) === false ? $this->generateForSpecificStores($object, $newStores)
                : $this->generateForAllStores($object);
            $this->urlPersist->deleteByData(
                [
                    UrlRewrite::ENTITY_ID => $object->getId(),
                    UrlRewrite::ENTITY_TYPE => self::ENTITY_TYPE,
                ]
            );
            $this->urlPersist->replace($urls);
        }

        return parent::_afterSave($object);
    }

    protected function _beforeDelete(\Magento\Framework\Model\AbstractModel $object)
    {
        $condition = ['page_id = ?' => (int)$object->getId()];

        $this->getConnection()->delete($this->getTable('amasty_xlanding_page_store'), $condition);

        return parent::_beforeDelete($object);
    }


    protected function _afterDelete(\Magento\Framework\Model\AbstractModel $object)
    {
        $this->urlPersist->deleteByData(
            [
                UrlRewrite::ENTITY_ID => $object->getId(),
                UrlRewrite::ENTITY_TYPE => self::ENTITY_TYPE,
            ]
        );

        return parent::_afterDelete($object);
    }

    public function getSitemapCollection($storeId)
    {
        $pages = [];

        $select = $this->getConnection()->select()->from(
            ['main_table' => $this->getMainTable()],
            [$this->getIdFieldName(), 'url' => 'identifier', 'updated_at' => 'update_time']
        )->join(
            ['store_table' => $this->getTable('amasty_xlanding_page_store')],
            'main_table.page_id = store_table.page_id',
            []
        )->where(
            'main_table.is_active = 1'
        )->where(
            'store_table.store_id IN(?)',
            [0, $storeId]
        );

        $query = $this->getConnection()->query($select);
        while ($row = $query->fetch()) {
            $page = $this->_prepareObject($row);
            $pages[$page->getId()] = $page;
        }

        return $pages;
    }

    /**
     * Prepare page object
     *
     * @param array $data
     * @return \Magento\Framework\DataObject
     */
    protected function _prepareObject(array $data)
    {
        $object = new \Magento\Framework\DataObject();
        $object->setId($data[$this->getIdFieldName()]);
        $object->setUrl($data['url']);
        $object->setUpdatedAt($data['updated_at']);

        return $object;
    }
}